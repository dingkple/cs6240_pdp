diff --git a/MatrixPagerank/src/main/java/Config/PagerankConfig.java b/MatrixPagerank/src/main/java/Config/PagerankConfig.java
index d62c3f5..59ed9aa 100644
--- a/MatrixPagerank/src/main/java/Config/PagerankConfig.java
+++ b/MatrixPagerank/src/main/java/Config/PagerankConfig.java
@@ -25,27 +25,18 @@ public class PagerankConfig {
     public static final String DANGLING_FILENAME = "danglingsum";
     public static final String EMPTY_INLINKS = "~~~";
     public static final String PARTITION_BY_ROW = "partitionbyrow";
-    public static final int LINK_MAP_TYPE = 3;
-    public static final String MAPPED_OUTPUT = "mappedoutput";
-    public static final int DANGLING_NAME_INT = -1;
-    public static final int EMPTY_INLINKS_INT = -2;
-    public static final java.lang.String OUTPUT_WORKING_DIRECTORY = "workingdirectory";
-    public static final int NUMBER_OF_REDUCERS_INT = 18;
     public static Long KEY_TYEP_ROW = 1L;
     public static int PR_BLOCK_SIZE = 5000;
-    public static Long ROWCOL_BLOCK_SIZE_LONG = 5000000L;
+    public static Long ROWCOL_BLOCK_SIZE_LONG = 5000L;
     public static String ROWCOL_BLOCK_SIZE_STRING = "rowcolblocksize";
-    public static String BY_ROW_OUTPUT = "byrowoutput";
-    public static String BY_COL_OUTPUT = "bycoloutput";
-    public static String NUMBER_OF_REDUCERS_STR = "numberofreducers";
 
     public static enum PagerankCounter{
         LINK_COUNTER,
         EDGE_COUNTER,
-        NUMBER_OF_DANGLING,
+        NUMBER_OF_DANGLING
     }
 
-    public static final String DANGLING_NAME = "~~~~~~~";
+    public static final String DANGLING_NAME = "~";
     public static final double PAGERANK_D = 0.85;
 
     public static final int TOP_NUMBER = 100;
@@ -56,8 +47,7 @@ public class PagerankConfig {
     public static final String TIME_USED_KEY = "time_used";
     public static final String ENTROPY_NAME = "~~";
     public static final String ITER_NUM = "iter_num";
-    public static final String TOP_100_PATH_BY_ROW = "top_100_links_by_row";
-    public static final String TOP_100_PATH_BY_COL = "top_100_links_by_col";
+    public static final String TOP_100_PATH = "top_100_links";
     public static final String URI_ROOT = "uri_root";
     public static final String TEMP_ROOT = "temp";
     public static final String FINAL_OUTPUT = "final_output";
diff --git a/MatrixPagerank/src/main/java/Multiplication/ByRowMapper.java b/MatrixPagerank/src/main/java/Multiplication/ByRowMapper.java
deleted file mode 100644
index 3c33b8a..0000000
--- a/MatrixPagerank/src/main/java/Multiplication/ByRowMapper.java
+++ /dev/null
@@ -1,248 +0,0 @@
-package Multiplication;
-
-import Config.PagerankConfig;
-import Preprocess.CellArrayWritable;
-import Preprocess.CellWritable;
-import Util.Utils;
-import org.apache.hadoop.fs.FileStatus;
-import org.apache.hadoop.fs.FileSystem;
-import org.apache.hadoop.fs.Path;
-import org.apache.hadoop.io.*;
-import org.apache.hadoop.mapreduce.Mapper;
-
-import java.io.IOException;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * Created by kingkz on 11/12/16.
- */
-public class ByRowMapper extends Mapper<IntWritable, CellArrayWritable,
-        IntWritable, DoubleWritable> {
-
-    private long numberOfLinks;
-    private int iterNumber;
-    private boolean isByRow;
-    private double counter;
-    private Map<Integer, Double> pagerankMap;
-    private double lastDanglingSum;
-    private Map<Integer, Double> pagerankValueMap;
-
-    @Override
-    protected void setup(Context context) throws IOException, InterruptedException {
-        if (context.getConfiguration().get(PagerankConfig.URI_ROOT) !=
-                null) {
-            if (context.getConfiguration().get(PagerankConfig
-                    .NUMBER_OF_LINKS) != null)
-                numberOfLinks = context.getConfiguration().getLong(PagerankConfig
-                        .NUMBER_OF_LINKS, 0);
-            else {
-                throw new IOException("Can not read number of Links");
-            }
-        } else {
-            numberOfLinks = Long.valueOf(
-                    Utils.readData(PagerankConfig.NUMBER_OF_LINKS, context
-                            .getConfiguration())
-            );
-        }
-
-        iterNumber = Integer.valueOf(context.getConfiguration().get(PagerankConfig
-                .ITER_NUM));
-
-        isByRow = context.getConfiguration().getBoolean(PagerankConfig
-                .PARTITION_BY_ROW, true);
-
-        counter = 0.0;
-
-        lastDanglingSum = context.getConfiguration().getDouble(PagerankConfig
-                .DANGLING_NAME, 0);
-
-        pagerankValueMap = new HashMap<>();
-
-        try {
-            pagerankMap = readPagerankValue(context);
-        } catch (Exception e) {
-            e.printStackTrace();
-            System.out.println("Error reading pagerankvalues");
-            throw new IOException("by row mapper setup");
-        }
-    }
-
-
-    private Map<Integer, Double> readPagerankValue(Context context) throws
-            IOException, URISyntaxException {
-//        URI[] uriArray = context.getCacheFiles();
-//
-//        URI path = null;
-//        if (uriArray != null) {
-//            for (URI uri : uriArray) {
-//                System.out.println("current checking uri: " + uri.toString());
-//                System.out.println("pagerankdir: " + PagerankConfig
-//                        .OUTPUT_PAGERANK + iterNumber);
-//                System.out.println(uri.toString().contains(PagerankConfig
-//                        .OUTPUT_PAGERANK + iterNumber));
-//                if (uri.toString().contains(PagerankConfig
-//                        .OUTPUT_PAGERANK + iterNumber)) {
-//                    path = uri;
-//                    System.out.println("Im not NULL: !!!" + path);
-//                    break;
-//                }
-//            }
-//        }
-
-//        if (path == null) {
-//            String pathStr = PagerankConfig
-//                    .OUTPUT_PAGERANK +
-//                    iterNumber;
-//            if (iterNumber == 1) {
-//                pathStr += "/-r-00000";
-//            } else {
-//                pathStr += "/part-r-00000";
-//            }
-//            path = Utils.getPathInTemp(context.getConfiguration(), pathStr).toUri();
-//        }
-
-//
-//        System.out.println("final path: " + path);
-        String pathStr = context.getConfiguration().get(PagerankConfig
-                .OUTPUT_WORKING_DIRECTORY) + "/" + Utils.getPathInTemp(context
-                .getConfiguration(), PagerankConfig
-                .OUTPUT_PAGERANK+iterNumber);
-//        if (iterNumber == 1) {
-//            pathStr += "/-r-00000";
-//        } else {
-//            pathStr += "/part-r-00000";
-//        }
-
-        Map<Integer, Double> pagerank = new HashMap<>();
-
-        FileSystem fs = FileSystem.get(new URI(context.getConfiguration().get
-                (PagerankConfig.OUTPUT_WORKING_DIRECTORY)), context
-                .getConfiguration());
-
-        for (FileStatus file : fs.listStatus(new Path(pathStr))) {
-            if (file.getPath().getName().startsWith("-r") ||
-                    file.getPath().getName().startsWith("part"))
-            readFileToMap(file.getPath(), pagerank, context);
-        }
-
-        return pagerank;
-    }
-
-
-    public Map<Integer, Double> readFileToMap(Path path, Map<Integer, Double> pagerank, Context
-            context) throws IOException {
-        System.out.println("final: " + path.toString());
-
-        SequenceFile.Reader reader = new SequenceFile.Reader(context
-                .getConfiguration(), SequenceFile.Reader.file
-                (path));
-        while (true) {
-            IntWritable key = new IntWritable();
-            DoubleWritable value = new DoubleWritable();
-
-            if (!reader.next(key, value)) {
-                reader.close();
-                break;
-            }
-            double v;
-            if (iterNumber == 1) {
-                v = 1.0 / numberOfLinks;
-            } else {
-                v = (lastDanglingSum/numberOfLinks + value.get()) * 0.85 +
-                        0.15 / numberOfLinks;
-            }
-
-            counter += v;
-
-            pagerank.put(key.get(), v);
-        }
-
-        return pagerank;
-    }
-
-    private void calculateValueByRow(int rowId, CellArrayWritable cells)
-            throws IOException, InterruptedException {
-
-        for (Writable cell : cells.get()) {
-            CellWritable c = (CellWritable) cell;
-
-            if (rowId == PagerankConfig.EMPTY_INLINKS_INT) {
-                pagerankValueMap.put(c.getRowcol(), 0.0);
-            } else {
-
-                if (!pagerankValueMap.containsKey(rowId))
-                    pagerankValueMap.put(rowId, 0.0);
-
-                if (pagerankMap.containsKey(c.getRowcol())) {
-                    double change = c.getValue() * pagerankMap.get(c.getRowcol());
-                    pagerankValueMap.put(
-                            rowId,
-                            pagerankValueMap.get(rowId)
-                                    + change);
-                } else {
-                    System.out.println("fuck");
-                }
-            }
-        }
-    }
-
-
-    private void calculateByCol(int rowId, CellArrayWritable cells) {
-        if (rowId == PagerankConfig.EMPTY_INLINKS_INT) {
-            for (Writable w : cells.get()) {
-                CellWritable cell = (CellWritable) w;
-                pagerankValueMap.put(cell.getRowcol(), 0.0);
-            }
-        } else if (rowId == PagerankConfig.DANGLING_NAME_INT) {
-            double v = 0;
-            if (!pagerankValueMap.containsKey(rowId))
-                pagerankValueMap.put(rowId, 0.0);
-            for (Writable w : cells.get()) {
-                CellWritable cell  = (CellWritable) w;
-                v += pagerankMap.get(cell.getRowcol());
-            }
-            pagerankValueMap.put(rowId, v);
-        } else {
-            for (Writable cell : cells.get()) {
-                CellWritable c = (CellWritable) cell;
-
-                if (!pagerankValueMap.containsKey(c.getRowcol())) {
-                    pagerankValueMap.put(c.getRowcol(), 0.0);
-                }
-                if (pagerankMap.containsKey(rowId)) {
-                    pagerankValueMap.put(
-                            c.getRowcol(),
-                            pagerankValueMap.get(
-                                    c.getRowcol()) + c.getValue() *
-                                    pagerankMap.get(rowId)
-                    );
-                }
-            }
-        }
-    }
-
-    @Override
-    protected void map(IntWritable key, CellArrayWritable value,
-                       Context context) throws IOException, InterruptedException {
-        if (isByRow)
-            calculateValueByRow(key.get(), value);
-        else
-            calculateByCol(key.get(), value);
-    }
-
-
-    @Override
-    protected void cleanup(Context context) throws IOException, InterruptedException {
-        for (int i : pagerankValueMap.keySet()) {
-            context.write(
-                    new IntWritable(i),
-                    new DoubleWritable(pagerankValueMap.get(i))
-            );
-        }
-
-        System.out.println(counter);
-    }
-}
diff --git a/MatrixPagerank/src/main/java/Multiplication/ByRowReducer.java b/MatrixPagerank/src/main/java/Multiplication/ByRowReducer.java
deleted file mode 100644
index f73f922..0000000
--- a/MatrixPagerank/src/main/java/Multiplication/ByRowReducer.java
+++ /dev/null
@@ -1,140 +0,0 @@
-package Multiplication;
-
-import Config.PagerankConfig;
-import Util.Utils;
-import org.apache.hadoop.fs.Path;
-import org.apache.hadoop.io.DoubleWritable;
-import org.apache.hadoop.io.IntWritable;
-import org.apache.hadoop.io.SequenceFile;
-import org.apache.hadoop.mapreduce.Mapper;
-import org.apache.hadoop.mapreduce.Reducer;
-
-import java.io.IOException;
-import java.net.URI;
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * Created by kingkz on 11/15/16.
- */
-public class ByRowReducer extends Reducer<IntWritable, DoubleWritable,
-        IntWritable, DoubleWritable> {
-
-    private double counter;
-    private int iterNumber;
-    private int numberOfLinks;
-    private double lastDanglingSum;
-    private Map<Integer, Double> pagerankMap;
-
-
-//    private Map<Integer, Double> readPagerankValue(Context context) throws
-//            IOException {
-//        URI[] uriArray = context.getCacheFiles();
-//
-//        URI path = null;
-//        if (uriArray != null) {
-//            for (URI uri : uriArray) {
-//                System.out.println("current checking uri: " + uri.toString());
-//                System.out.println("pagerankdir: " + PagerankConfig
-//                        .OUTPUT_PAGERANK + iterNumber);
-//                System.out.println(uri.toString().contains(PagerankConfig
-//                        .OUTPUT_PAGERANK + iterNumber));
-//                if (uri.toString().contains(PagerankConfig
-//                        .OUTPUT_PAGERANK + iterNumber)) {
-//                    path = uri;
-//                    System.out.println("Im not NULL: !!!" + path);
-//                    break;
-//                }
-//            }
-//        }
-//
-//        if (path == null) {
-//            String pathStr = PagerankConfig
-//                    .OUTPUT_PAGERANK +
-//                    iterNumber;
-//            if (iterNumber == 1) {
-//                pathStr += "/-r-00000";
-//            } else {
-//                pathStr += "/part-r-00000";
-//            }
-//            path = Utils.getPathInTemp(context.getConfiguration(), pathStr)
-//                    .toUri();
-//        }
-//
-//
-//        SequenceFile.Reader reader = new SequenceFile.Reader(context
-//                .getConfiguration(), SequenceFile.Reader.file
-//                (new Path(path)));
-//
-//        Map<Integer, Double> map = new HashMap<>();
-//        while (true) {
-//            IntWritable key = new IntWritable();
-//            DoubleWritable value = new DoubleWritable();
-//
-//            if (!reader.next(key, value)) {
-//                break;
-//            }
-//            map.put(key.get(), 0.0);
-//        }
-//
-//        return map;
-//    }
-
-    @Override
-    protected void setup(Context context) throws IOException, InterruptedException {
-        counter = 0.0;
-
-        iterNumber = Integer.valueOf(context.getConfiguration().get(PagerankConfig
-                .ITER_NUM));
-
-        counter = 0.0;
-
-        lastDanglingSum = context.getConfiguration().getDouble(PagerankConfig
-                .DANGLING_NAME, 0);
-
-//        pagerankMap = readPagerankValue(context);
-        pagerankMap = new HashMap<>();
-    }
-
-    @Override
-    protected void reduce(IntWritable key, Iterable<DoubleWritable> values, Context context) throws IOException, InterruptedException {
-        double v = 0;
-        for (DoubleWritable d : values) {
-            v += d.get();
-        }
-
-//        if (key.get() == PagerankConfig.DANGLING_NAME_INT) {
-//            Utils.writeData(PagerankConfig.DANGLING_FILENAME, String.valueOf
-//                    (v), context.getConfiguration());
-//        } else {
-        pagerankMap.put(key.get(), v);
-//        }
-
-        counter += v;
-    }
-
-    @Override
-    protected void cleanup(Context context) throws IOException, InterruptedException {
-        IntWritable key = new IntWritable();
-        DoubleWritable value = new DoubleWritable();
-        for (int k : pagerankMap.keySet()) {
-            if (k != PagerankConfig.DANGLING_NAME_INT) {
-                key.set(k);
-                value.set(pagerankMap.get(k));
-                context.write(
-                        key,
-                        value
-                );
-            } else {
-                Utils.writeData(PagerankConfig.DANGLING_FILENAME, String
-                                .valueOf(pagerankMap.get(k)),
-                        context
-                        .getConfiguration());
-            }
-        }
-
-//        Utils.writeData(PagerankConfig.DANGLING_FILENAME, String.valueOf(1 -
-//                counter), context.getConfiguration());
-        System.out.println(counter);
-    }
-}
diff --git a/MatrixPagerank/src/main/java/Multiplication/MatricesMapper.java b/MatrixPagerank/src/main/java/Multiplication/MatricesMapper.java
index 90879ac..93f9f66 100644
--- a/MatrixPagerank/src/main/java/Multiplication/MatricesMapper.java
+++ b/MatrixPagerank/src/main/java/Multiplication/MatricesMapper.java
@@ -2,14 +2,12 @@ package Multiplication;
 
 import Config.PagerankConfig;
 import Preprocess.CellArrayWritable;
-import Preprocess.CellWritable;
 import Util.Utils;
-import org.apache.hadoop.fs.Path;
-import org.apache.hadoop.io.*;
+import org.apache.hadoop.io.IntWritable;
+import org.apache.hadoop.io.Writable;
 import org.apache.hadoop.mapreduce.Mapper;
 
 import java.io.IOException;
-import java.net.URI;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -21,24 +19,20 @@ import java.util.Map;
 public class MatricesMapper extends Mapper<IntWritable, Writable,
         IntWritable, ROWCOLArrayWritable> {
 
-    private long numberOfLinks;
-    private int iterNumber;
+    private long totalRecs;
+    private int iter;
     private int blockNum;
     private Map<Integer, List<ROWCOLWritable>> blockMap;
     private boolean isByRow;
-    private double counter;
-    private Map<Integer, Double> pagerankMap;
-    private double lastDanglingSum;
-    private Map<Integer, Double> pagerankValueMap;
 
     @Override
     protected void setup(Context context) throws IOException, InterruptedException {
-        numberOfLinks = Long.valueOf(
+        totalRecs = Long.valueOf(
                 Utils.readData(PagerankConfig.NUMBER_OF_LINKS, context
                         .getConfiguration())
         );
 
-        iterNumber = Integer.valueOf(context.getConfiguration().get(PagerankConfig
+        iter = Integer.valueOf(context.getConfiguration().get(PagerankConfig
                 .ITER_NUM));
 
         blockNum = context.getConfiguration().getInt(String.valueOf(PagerankConfig
@@ -48,118 +42,21 @@ public class MatricesMapper extends Mapper<IntWritable, Writable,
 
         isByRow = context.getConfiguration().getBoolean(PagerankConfig
                 .PARTITION_BY_ROW, true);
-
-        counter = 0.0;
-
-        pagerankMap = readPagerankValue(context);
-
-        lastDanglingSum = context.getConfiguration().getDouble(PagerankConfig
-                .DANGLING_NAME, 0);
-
-        pagerankValueMap = new HashMap<>();
-    }
-
-
-    private Map<Integer, Double> readPagerankValue(Context context) throws
-            IOException {
-        URI[] uriArray = context.getCacheFiles();
-
-        String path = null;
-        if (uriArray != null) {
-            for (URI uri : uriArray) {
-                if (uri.getPath().contains(PagerankConfig
-                        .OUTPUT_PAGERANK+ iterNumber)) {
-                    path = uri.getPath();
-                    break;
-                }
-            }
-        }
-
-        if (path == null) {
-            path = Utils.getPathInTemp(context.getConfiguration(), PagerankConfig
-                    .OUTPUT_PAGERANK +
-                    iterNumber)
-                    .toString();
-        }
-
-        SequenceFile.Reader reader = new SequenceFile.Reader(context
-                .getConfiguration(), SequenceFile.Reader.file
-                (new Path(path+"/-r-00000")));
-
-        Map<Integer, Double> map = new HashMap<>();
-        while (true) {
-            IntWritable key = new IntWritable();
-            DoubleWritable value = new DoubleWritable();
-
-            if (!reader.next(key, value)) {
-                break;
-            }
-            double v;
-            if (iterNumber == 1) {
-                v = 1.0 / numberOfLinks;
-            } else {
-                v = (lastDanglingSum/numberOfLinks + value.get()) * 0.85 + 0.15 /
-                        numberOfLinks;
-            }
-
-            map.put(key.get(), v);
-        }
-
-        return map;
-    }
-
-    private void calculateValueByRow(ROWCOLWritable rowcol)
-            throws IOException, InterruptedException {
-            boolean isEmpltyInlink = rowcol.getId() == PagerankConfig
-                    .EMPTY_INLINKS.hashCode();
-            for (Writable cell : rowcol.getCellArray().get()) {
-                CellWritable c = (CellWritable) cell;
-
-                if (isEmpltyInlink) {
-                    pagerankValueMap.put(c.getRowcol(), 0.0);
-                    continue;
-                }
-                if (!pagerankValueMap.containsKey(rowcol.getId()))
-                    pagerankValueMap.put(rowcol.getId(), 0.0);
-
-                if (pagerankMap.containsKey(c.getRowcol())) {
-                    double change = c.getValue()
-                            * pagerankMap.get(c.getRowcol());
-                    pagerankValueMap.put(
-                            rowcol.getId(),
-                            pagerankValueMap.get(rowcol.getId())
-                                    + change);
-                } else {
-                    System.out.println("fuck");
-                }
-        }
     }
 
     @Override
     protected void map(IntWritable key, Writable value,
                        Context context) {
-        int keyInt = key.get();
-//        int block_id = key.get() % blockNum;
-        int block_id;
-
-        if (keyInt < 0) block_id = 0;
-        else {
-            block_id = key.get() % (blockNum - 1) + 1;
-        }
-
 
+        int block_id = key.get() % blockNum;
+        if (block_id < 0) block_id += blockNum;
         if (!blockMap.containsKey(block_id)) {
             blockMap.put(block_id, new ArrayList<>());
         }
-        CellArrayWritable cells = (CellArrayWritable) value;
-        for (Writable w1 : cells.get()) {
-            CellWritable c = (CellWritable) w1;
-            counter += c.getValue();
-        }
-        if (key.get() == PagerankConfig.DANGLING_NAME_INT) {
+        if (key.get() == PagerankConfig.DANGLING_NAME.hashCode()) {
             ROWCOLWritable danglingRow = new ROWCOLWritable(
                     key.get(),
-                    cells
+                    (CellArrayWritable) value
             );
 
             if (!isByRow) {
@@ -176,7 +73,7 @@ public class MatricesMapper extends Mapper<IntWritable, Writable,
             blockMap.get(block_id).add(
                     new ROWCOLWritable(
                             key.get(),
-                            cells
+                            (CellArrayWritable) value
                     )
             );
         }
@@ -191,7 +88,5 @@ public class MatricesMapper extends Mapper<IntWritable, Writable,
                     new ROWCOLArrayWritable(blockMap.get(block))
             );
         }
-
-        System.out.println(counter);
     }
 }
diff --git a/MatrixPagerank/src/main/java/Multiplication/MultiplicationByColReducer.java b/MatrixPagerank/src/main/java/Multiplication/MultiplicationByColReducer.java
new file mode 100644
index 0000000..f741a3c
--- /dev/null
+++ b/MatrixPagerank/src/main/java/Multiplication/MultiplicationByColReducer.java
@@ -0,0 +1,15 @@
+package Multiplication;
+
+import org.apache.hadoop.io.DoubleWritable;
+import org.apache.hadoop.io.IntWritable;
+import org.apache.hadoop.mapreduce.Reducer;
+
+/**
+ * Created by kingkz on 11/13/16.
+ */
+public class MultiplicationByColReducer extends Reducer<IntWritable,
+        ROWCOLArrayWritable, IntWritable, DoubleWritable> {
+
+
+
+}
diff --git a/MatrixPagerank/src/main/java/Multiplication/MultiplicationByRowReducer.java b/MatrixPagerank/src/main/java/Multiplication/MultiplicationByRowReducer.java
index f683419..590cb6b 100644
--- a/MatrixPagerank/src/main/java/Multiplication/MultiplicationByRowReducer.java
+++ b/MatrixPagerank/src/main/java/Multiplication/MultiplicationByRowReducer.java
@@ -28,9 +28,7 @@ public class MultiplicationByRowReducer extends Reducer<IntWritable, ROWCOLArray
     private double counter2;
     private double counter3;
     private int counter4;
-    private double counter5;
-
-    private double counter6 = 0;
+    private boolean flag;
 
     @Override
     protected void setup(Context context) throws IOException, InterruptedException {
@@ -43,9 +41,9 @@ public class MultiplicationByRowReducer extends Reducer<IntWritable, ROWCOLArray
         counter2 = 0.0;
         counter3 = 0.0;
         counter4 = 0;
-        counter5 = 0.0;
 
         tracker = new HashMap<>();
+        flag = false;
     }
 
     @Override
@@ -70,9 +68,11 @@ public class MultiplicationByRowReducer extends Reducer<IntWritable, ROWCOLArray
                                 .get(cell.getRowcol()) + cell.getValue());
                         counter3 += cell.getValue();
 //                        pagerankOldMap.put(cell.getRowcol(), cell.getValue());
-                        if (!tracker.containsKey(cell.getRowcol()))
+                        if (!flag)
                             tracker.put(cell.getRowcol(), cell.getValue());
                     }
+                    flag = true;
+
                     int l2 = pagerankOldMap.size();
                 } else {
                     this.rowdata.add(new ROWCOLWritable(w));
@@ -193,11 +193,7 @@ public class MultiplicationByRowReducer extends Reducer<IntWritable, ROWCOLArray
                                     + change);
                     tracker.put(c.getRowcol(), tracker.get(c.getRowcol()) -
                             change);
-                } else {
-                    System.out.println("fuck");
                 }
-//                if (c.getValue() < 1)
-                counter6 += c.getValue();
             }
         }
     }
@@ -208,11 +204,6 @@ public class MultiplicationByRowReducer extends Reducer<IntWritable, ROWCOLArray
             writeValues(context);
         }
 
-        double k = 0;
-        for (int key: tracker.keySet()) {
-            k += tracker.get(key);
-        }
-
-        System.out.println(counter1 + " " + counter2 + " " + counter4 + " " + k);
+        System.out.println(counter1 + " " + counter2 + " " + counter4);
     }
 }
diff --git a/MatrixPagerank/src/main/java/Multiplication/MultiplicationPartitioner.java b/MatrixPagerank/src/main/java/Multiplication/MultiplicationPartitioner.java
deleted file mode 100644
index 6c4aa87..0000000
--- a/MatrixPagerank/src/main/java/Multiplication/MultiplicationPartitioner.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package Multiplication;
-
-import Config.PagerankConfig;
-import org.apache.hadoop.io.IntWritable;
-import org.apache.hadoop.mapred.JobConf;
-import org.apache.hadoop.mapreduce.Partitioner;
-
-/**
- * Created by kingkz on 11/15/16.
- */
-public class MultiplicationPartitioner extends Partitioner<IntWritable, ROWCOLArrayWritable> {
-    @Override
-    public int getPartition(IntWritable key, ROWCOLArrayWritable value, int numPartitions) {
-        int reduerId;
-        if (key.get() == 0) {
-            reduerId = 0;
-        } else {
-            reduerId = Math.abs(key.get() % (numPartitions-1)) + 1;
-        }
-        return reduerId;
-    }
-}
diff --git a/MatrixPagerank/src/main/java/Pagerank/RunPagerank.java b/MatrixPagerank/src/main/java/Pagerank/RunPagerank.java
index 5d1c437..70a155b 100644
--- a/MatrixPagerank/src/main/java/Pagerank/RunPagerank.java
+++ b/MatrixPagerank/src/main/java/Pagerank/RunPagerank.java
@@ -1,23 +1,20 @@
 package Pagerank;
 
 import Config.PagerankConfig;
-import Multiplication.ByRowMapper;
-import Multiplication.ByRowReducer;
-import Multiplication.PagerankByColMapper;
-import Multiplication.PagerankByColReducer;
+import Multiplication.*;
 import Preprocess.MatricesGenerator;
+import TOPK.PagerankValueMapper;
 import Util.Utils;
 import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.io.DoubleWritable;
 import org.apache.hadoop.io.IntWritable;
 import org.apache.hadoop.mapreduce.Job;
 import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
+import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;
 import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
 import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
 import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
-import org.apache.hadoop.util.GenericOptionsParser;
 
 import java.io.IOException;
 
@@ -29,89 +26,101 @@ import static TOPK.GetTopLinks.showTop;
 public class RunPagerank {
 
 
-    private static void iterationWithPartitionByRowCol(Configuration conf,
-                                                       boolean isByRow) throws
+    private static void iterationWithPartitionByRow(Configuration conf,
+                                                    boolean isByRow) throws
             Exception {
+        //todo
+
         long numberOfLinks = Long.valueOf(Utils
                 .readData(PagerankConfig.NUMBER_OF_LINKS, conf));
         conf.setLong(PagerankConfig.NUMBER_OF_LINKS, numberOfLinks);
-
+        conf.setInt(PagerankConfig.ROWCOL_BLOCK_SIZE_STRING, (int) (numberOfLinks /
+                PagerankConfig.ROWCOL_BLOCK_SIZE_LONG));
         conf.setBoolean(PagerankConfig.PARTITION_BY_ROW, isByRow);
 
         for (int i = 1; i <= 10; i++) {
             conf.setInt(PagerankConfig.ITER_NUM, i);
             double last = Double.parseDouble
                     (Utils.readData(PagerankConfig.DANGLING_FILENAME, conf));
-            System.out.println("Dangling sum: " + last);
+//            conf.setDouble(PagerankConfig.DANGLING_NAME, last);
             if (i > 1) {
                 conf.setDouble(PagerankConfig.DANGLING_NAME, last);
             }
 
-            Job job = Job.getInstance(conf, "iteration" + i);
+            conf.setInt(PagerankConfig.ITER_NUM, i);
+            Job job = Job.getInstance(conf);
+
             job.setJarByClass(RunPagerank.class);
 
             Path output;
             if (!isByRow) {
-//                MultipleInputs.addInputPath(
-//                        job,
-//                        Utils.getPathInTemp(PagerankConfig.MAPPED_OUTPUT + "/" +
-//                                PagerankConfig.OUTPUT_OUTLINKS_MAPPED),
-//                        SequenceFileInputFormat.class,
-//                        ByRowMapper.class
-//                );
-                FileInputFormat.addInputPath(job, Utils.getPathInTemp
-                        (conf, PagerankConfig.MAPPED_OUTPUT + "/" +
-                                PagerankConfig.OUTPUT_OUTLINKS_MAPPED));
-            } else {
-//                MultipleInputs.addInputPath(
-//                        job,
-//                        Utils.getPathInTemp(PagerankConfig.MAPPED_OUTPUT + "/" +
-//                                PagerankConfig.OUTPUT_INLINKS_MAPPED),
-//                        SequenceFileInputFormat.class,
-//                        ByRowMapper.class
-//                );
-                FileInputFormat.addInputPath(job, Utils.getPathInTemp
-                        (conf, PagerankConfig.MAPPED_OUTPUT + "/" +
-                                PagerankConfig.OUTPUT_INLINKS_MAPPED));
-
-            }
-            output = Utils.getPathInTemp(conf,
-                    PagerankConfig.OUTPUT_PAGERANK + String.valueOf(i+1)
-            );
-
-            String path = Utils.getPathInTemp(conf, PagerankConfig
-                    .OUTPUT_PAGERANK + String.valueOf(i)).toString();
-            if (i == 1) {
-                path += "/-r-00000";
+                MultipleInputs.addInputPath(
+                        job,
+                        Utils.getPathInTemp(PagerankConfig.OUTPUT_PAGERANK
+                                + String.valueOf(2 * i - 1)),
+                        SequenceFileInputFormat.class,
+                        PRValueV1Mapper.class
+                );
+                MultipleInputs.addInputPath(
+                        job,
+                        Utils.getPathInTemp(PagerankConfig.OUTPUT_OUTLINKS),
+                        SequenceFileInputFormat.class,
+                        MatricesMapper.class
+                );
+
+                output = Utils.getPathInTemp(
+                        PagerankConfig.OUTPUT_PAGERANK + String.valueOf(2 * i)
+                );
             } else {
-                path += "/part-r-00000";
+                MultipleInputs.addInputPath(
+                        job,
+                        Utils.getPathInTemp(PagerankConfig.OUTPUT_PAGERANK
+                        + String.valueOf(i)),
+                        SequenceFileInputFormat.class,
+                        PRValueV1Mapper.class
+                );
+                MultipleInputs.addInputPath(
+                        job,
+                        Utils.getPathInTemp(PagerankConfig.OUTPUT_INLINKS),
+                        SequenceFileInputFormat.class,
+                        MatricesMapper.class
+                );
+
+                output = Utils.getPathInTemp(
+                        PagerankConfig.OUTPUT_PAGERANK + String.valueOf(i+1)
+
+                );
             }
-            System.out.println("adding cachefile: " + path);
-//            job.addCacheFile(new URI(conf.get(PagerankConfig
-//                    .OUTPUT_WORKING_DIRECTORY) + "/" + path));
+
 
             job.setMapOutputKeyClass(IntWritable.class);
-            job.setMapOutputValueClass(DoubleWritable.class);
+            job.setMapOutputValueClass(ROWCOLArrayWritable.class);
             job.setOutputKeyClass(IntWritable.class);
             job.setOutputValueClass(DoubleWritable.class);
 
-            job.setMapperClass(ByRowMapper.class);
-            job.setReducerClass(ByRowReducer.class);
-            job.setNumReduceTasks(1);
-            job.setInputFormatClass(SequenceFileInputFormat.class);
+            job.setReducerClass(MultiplicationByRowReducer.class);
             job.setOutputFormatClass(SequenceFileOutputFormat.class);
 
             Utils.CheckOutputPath(conf, output);
             FileOutputFormat.setOutputPath(job, output);
 
+//            if (i > 1) {
+//                job.addCacheFile(Utils.getPathInTemp(PagerankConfig
+//                        .DANGLING_FILENAME).toUri());
+//            }
+
             boolean ok = job.waitForCompletion(true);
             if (!ok) {
                 throw  new Exception("Multiplication Failed");
             }
 
+            if (!isByRow) {
+                collectValueFromCols(conf, i);
+            }
         }
     }
 
+
     public static void collectValueFromCols(Configuration conf, int iter)
             throws Exception {
         Job job = Job.getInstance(conf);
@@ -127,15 +136,13 @@ public class RunPagerank {
         job.setOutputValueClass(DoubleWritable.class);
 
         Path input = Utils.getPathInTemp
-                (conf, PagerankConfig.OUTPUT_PAGERANK + String.valueOf(2 *
-                        iter));
+                (PagerankConfig.OUTPUT_PAGERANK + String.valueOf(2 * iter));
         FileInputFormat.addInputPath(job, input);
         job.setOutputFormatClass(SequenceFileOutputFormat.class);
         job.setInputFormatClass(SequenceFileInputFormat.class);
 
         Path output = Utils.getPathInTemp
-                (conf, PagerankConfig.OUTPUT_PAGERANK + String.valueOf(2 *
-                        iter+1));
+                (PagerankConfig.OUTPUT_PAGERANK + String.valueOf(2 * iter+1));
 
         Utils.CheckOutputPath(conf, output);
         FileOutputFormat.setOutputPath(job, output);
@@ -150,74 +157,10 @@ public class RunPagerank {
 
     public static void main(String[] args) throws Exception {
 
+        boolean isByRow = true;
         Configuration conf = new Configuration();
-        String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();
-
-        Path p = new Path("test");
-        FileSystem fs = p.getFileSystem(conf);
-        conf.set(PagerankConfig.OUTPUT_WORKING_DIRECTORY, String.valueOf(fs.getWorkingDirectory
-                ()));
-
-        Path input;
-
-        // If output is a URI, like hdfs:// or s3://, save it to conf
-        // or if it's a local path, save it to conf too.
-        if(otherArgs.length > 1) {
-            input = new Path(otherArgs[0]);
-            String op = otherArgs[1];
-            if (op.startsWith("hdfs") || op.startsWith("s3")) {
-                conf.set(PagerankConfig.URI_ROOT, op);
-            }
-            conf.set(PagerankConfig.FINAL_OUTPUT, op);
-        } else if (otherArgs.length > 0) {
-            input = new Path(otherArgs[0]);
-            conf.set(PagerankConfig.FINAL_OUTPUT, "output");
-        } else {
-            input = new Path("data0");
-            conf.set(PagerankConfig.FINAL_OUTPUT, "output");
-        }
-
-//
-//        long start = System.nanoTime();
-        MatricesGenerator.preprocess(conf, input);
-//        long preprocess = System.nanoTime();
-//        iterationWithPartitionByRowCol(conf, true);
-//        long iteration = System.nanoTime();
-//        showTop(conf, true);
-        long showTop = System.nanoTime();
-
-        iterationWithPartitionByRowCol(conf, false);
-
-        long iteration2 = System.nanoTime();
-        showTop(conf, false);
-        long end = System.nanoTime();
-
-//        printTime(conf, 1, start, preprocess, iteration, showTop);
-        printTime(conf, 2, showTop, showTop, iteration2, end);
-    }
-
-
-    private static void printTime(
-            Configuration conf,
-            long iterName,
-            long startTime,
-            long prePareTime,
-            long iterationTime,
-            long getTopTime) throws IOException {
-        String value = String.format(
-                "Time used for preparing: %.2f\n Time used for iteration: %.2f\n" +
-                        "Time used for Top 100: %.2f\n",
-
-                getTimeUsed(startTime, prePareTime),
-                getTimeUsed(prePareTime, iterationTime),
-                getTimeUsed(iterationTime, getTopTime)
-        );
-
-        Utils.writeStringToFinalPath(value, Utils.getFinalOutputPathByKey(conf,
-                PagerankConfig.TIME_USED_KEY + iterName), conf);
-    }
-
-    private static double getTimeUsed(long t1, long t2) {
-        return (t2 - t1) / 1000000000.;
+        MatricesGenerator.preprocess(conf, new Path("data0"));
+        iterationWithPartitionByRow(conf, isByRow);
+        showTop(conf, isByRow);
     }
 }
diff --git a/MatrixPagerank/src/main/java/Preprocess/GraphKeyWritable.java b/MatrixPagerank/src/main/java/Preprocess/GraphKeyWritable.java
index 47c5d4a..1dc29e9 100644
--- a/MatrixPagerank/src/main/java/Preprocess/GraphKeyWritable.java
+++ b/MatrixPagerank/src/main/java/Preprocess/GraphKeyWritable.java
@@ -1,6 +1,5 @@
 package Preprocess;
 
-import Config.PagerankConfig;
 import org.apache.hadoop.io.WritableComparable;
 
 import java.io.DataInput;
@@ -78,18 +77,14 @@ public class GraphKeyWritable implements WritableComparable<GraphKeyWritable> {
         count = in.readInt();
     }
 
-    private int getReduceKey(String name) {
-        return Math.abs(name.hashCode() % PagerankConfig.NUMBER_OF_REDUCERS_INT);
-    }
-
     @Override
     public int compareTo(GraphKeyWritable o) {
-        if (!name.equals(o.getName())) {
-            return name.compareTo(o.getName());
-        } else if (count != o.count) {
-            return count - o.count;
+        if (count != o.count) {
+            return (int) (count - o.count);
+        } else if (type != o.type) {
+            return (int) (type - o.type);
         } else {
-            return type - o.type;
+            return name.compareTo(o.name);
         }
     }
 
diff --git a/MatrixPagerank/src/main/java/Preprocess/LinkNameMapMapper.java b/MatrixPagerank/src/main/java/Preprocess/LinkNameMapMapper.java
index 5cb8c48..a983159 100644
--- a/MatrixPagerank/src/main/java/Preprocess/LinkNameMapMapper.java
+++ b/MatrixPagerank/src/main/java/Preprocess/LinkNameMapMapper.java
@@ -5,12 +5,14 @@ import com.google.common.collect.Iterables;
 import org.apache.hadoop.io.LongWritable;
 import org.apache.hadoop.io.Text;
 import org.apache.hadoop.mapreduce.Mapper;
+import org.apache.hadoop.yarn.webapp.view.HtmlPage;
 import org.xml.sax.SAXException;
 import org.xml.sax.XMLReader;
 
 import javax.xml.parsers.ParserConfigurationException;
 import java.io.IOException;
 import java.util.*;
+import java.util.stream.Collectors;
 
 import static Preprocess.Bz2WikiParser.createParser;
 import static Preprocess.Bz2WikiParser.processLine;
@@ -45,11 +47,6 @@ public class LinkNameMapMapper extends Mapper<LongWritable, Text, GraphKeyWritab
             // Get the name of the link
             linkPageNames.clear();
             String pageName = processLine(line.toString(), xmlReader);
-
-            if (linkPageNames.contains(pageName)) {
-                linkPageNames.remove(pageName);
-            }
-
             GraphKeyWritable linkKey = new GraphKeyWritable(
                     PagerankConfig.OUTLINK_TYPE,
                     pageName,
@@ -57,11 +54,15 @@ public class LinkNameMapMapper extends Mapper<LongWritable, Text, GraphKeyWritab
 
             List<GraphKeyWritable> outlinks = new ArrayList<>();
             if (pageName.length() > 0) {
+                if (linkPageNames.contains(pageName)) {
+                    linkPageNames.remove(pageName);
+                }
 
                 for (String name : linkPageNames) {
                     if (!inlinkMap.containsKey(name)) {
                         inlinkMap.put(name, new ArrayList<>());
                     }
+
                     inlinkMap.get(name).add(linkKey);
                     outlinks.add(new GraphKeyWritable(
                             PagerankConfig.OUTLINK_TYPE,
@@ -80,10 +81,6 @@ public class LinkNameMapMapper extends Mapper<LongWritable, Text, GraphKeyWritab
                 context.write(new GraphKeyWritable(PagerankConfig.INLINK_TYPE,
                         pageName),
                         new GraphKeyArrayWritable());
-
-                context.write(new GraphKeyWritable(PagerankConfig.LINK_MAP_TYPE,
-                        pageName),
-                        new GraphKeyArrayWritable());
             }
         }
     }
@@ -102,14 +99,6 @@ public class LinkNameMapMapper extends Mapper<LongWritable, Text, GraphKeyWritab
                     )
             );
 
-            context.write(
-                    new GraphKeyWritable(
-                            PagerankConfig.LINK_MAP_TYPE,
-                            name),
-                    new GraphKeyArrayWritable()
-                    );
-
-
             context.write(new GraphKeyWritable(PagerankConfig.OUTLINK_TYPE,
                     name), new GraphKeyArrayWritable());
         }
diff --git a/MatrixPagerank/src/main/java/Preprocess/LinkNameMapReducer.java b/MatrixPagerank/src/main/java/Preprocess/LinkNameMapReducer.java
index 9a3f79d..133dfca 100644
--- a/MatrixPagerank/src/main/java/Preprocess/LinkNameMapReducer.java
+++ b/MatrixPagerank/src/main/java/Preprocess/LinkNameMapReducer.java
@@ -19,15 +19,10 @@ public class LinkNameMapReducer extends Reducer<GraphKeyWritable,
 
     private Counter linkCounter;
     private MultipleOutputs multipleOutput;
-    private List<TextCellWritable> names;
-    private List<TextCellWritable> danglings;
+    private List<CellWritable> names;
+    private List<CellWritable> danglings;
     private int counter1;
-    private List<TextCellWritable> emptyInlinks;
-    private double counter2 = 0;
-    private double counter3 = 0;
-    private int reducerID;
-    private int inReducerCounter;
-    private int numberOfReducers;
+    private List<CellWritable> emptyInlinks;
 
     @Override
     protected void setup(Context context) throws IOException, InterruptedException {
@@ -37,11 +32,6 @@ public class LinkNameMapReducer extends Reducer<GraphKeyWritable,
         danglings = new ArrayList<>();
         emptyInlinks = new ArrayList<>();
         counter1 = 0;
-        counter3 = 0;
-        reducerID = -1;
-
-        inReducerCounter = 0;
-        numberOfReducers = PagerankConfig.NUMBER_OF_REDUCERS_INT;
     }
 
     @Override
@@ -54,82 +44,65 @@ public class LinkNameMapReducer extends Reducer<GraphKeyWritable,
             if (list.get().length > 0) {
                 for (Writable w : list.get()) {
                     GraphKeyWritable t = (GraphKeyWritable) w;
-                    TextCellWritable cell = new TextCellWritable(
-                            t.getName() , 1.0 / t.getCount());
-
-                    if (key.getType() == PagerankConfig.INLINK_TYPE)
-                        counter2 += 1.0 / t.getCount();
-                    if (key.getType() == PagerankConfig.OUTLINK_TYPE)
-                        counter3 += 1.0/t.getCount();
+                    CellWritable cell = new CellWritable(
+                            t.getName().hashCode() , 1.0/t.getCount());
                     names.add(cell);
                 }
             }
         }
+//
+//        if (names.size() > 0) {
+//            for (CellWritable cell : names) {
+//                cell.setValue(1.0 / names.size());
+//            }
+//        } else {
+//
+//        }
+
+        CellArrayWritable outlinks = new CellArrayWritable(Iterables.toArray
+                (names, CellWritable.class));
 
-        TextCellArrayWritable links = new TextCellArrayWritable(names);
 
         if (key.getType() == PagerankConfig.OUTLINK_TYPE) {
+            linkCounter.increment(1);
 
-            if (links.get().length > 0) {
+            if (outlinks.get().length > 0) {
                 multipleOutput.write(
                         PagerankConfig.OUTPUT_OUTLINKS,
-                        key,
-                        links,
+                        new IntWritable(key.getName().hashCode()),
+                        outlinks,
                         PagerankConfig.OUTPUT_OUTLINKS + "/"
                 );
             } else {
-                danglings.add(new TextCellWritable(key.getName(), 1.0));
-            }
-
-//            linkCounter.increment(1);
-//            int linkId = inReducerCounter * numberOfReducers + reducerID;
-//            inReducerCounter += 1;
-//            multipleOutput.write(
-//                    PagerankConfig.OUTPUT_LINKMAP,
-//                    new Text(key.getName()),
-//                    new Text(String.valueOf(linkId)),
-//                    PagerankConfig.OUTPUT_LINKMAP + "/"
-//            );
-//
-//            multipleOutput.write(
-//                    PagerankConfig.OUTPUT_PAGERANK,
-//                    new IntWritable(linkId),
-//                    new DoubleWritable(0.0),
-//                    PagerankConfig.OUTPUT_PAGERANK + "1/"
-//            );
-
-
-        } else if (key.getType() == PagerankConfig.INLINK_TYPE) {
-            if (links.get().length > 0) {
-
-                multipleOutput.write(
-                        PagerankConfig.OUTPUT_INLINKS,
-                        key,
-                        links,
-                        PagerankConfig.OUTPUT_INLINKS + "/"
-                );
-                counter1 += 1;
-            } else {
-                emptyInlinks.add(new TextCellWritable(key.getName(),
-                        0.0));
+                danglings.add(new CellWritable(key.getName().hashCode(), 1.0));
             }
-        } else {
-            linkCounter.increment(1);
-
 
             multipleOutput.write(
                     PagerankConfig.OUTPUT_LINKMAP,
                     new Text(key.getName()),
-                    new IntWritable((int) linkCounter.getValue()),
+                    new IntWritable(key.getName().hashCode()),
                     PagerankConfig.OUTPUT_LINKMAP + "/"
             );
 
             multipleOutput.write(
                     PagerankConfig.OUTPUT_PAGERANK,
-                    new IntWritable((int) linkCounter.getValue()),
+                    new IntWritable(key.getName().hashCode()),
                     new DoubleWritable(0.0),
                     PagerankConfig.OUTPUT_PAGERANK + "1/"
             );
+        } else {
+            if (outlinks.get().length > 0) {
+                multipleOutput.write(
+                        PagerankConfig.OUTPUT_INLINKS,
+                        new IntWritable(key.getName().hashCode()),
+                        outlinks,
+                        PagerankConfig.OUTPUT_INLINKS + "/"
+                );
+                counter1 += 1;
+            } else {
+                emptyInlinks.add(new CellWritable(key.getName().hashCode(),
+                        0.0));
+            }
         }
 
     }
@@ -137,68 +110,41 @@ public class LinkNameMapReducer extends Reducer<GraphKeyWritable,
     @Override
     protected void cleanup(Context context) throws IOException, InterruptedException {
 
-        TextCellWritable[] danglingArr = Iterables.toArray(danglings,
-                TextCellWritable.class);
+        CellWritable[] danglingArr = Iterables.toArray(danglings,
+                CellWritable.class);
 
-        TextCellWritable[] emptyInlinkArr = Iterables.toArray(emptyInlinks,
-                TextCellWritable.class);
+        CellWritable[] emptyInlinkArr = Iterables.toArray(emptyInlinks,
+                CellWritable.class);
         multipleOutput.write(
                 PagerankConfig.OUTPUT_OUTLINKS,
-                new GraphKeyWritable(
-                        PagerankConfig.OUTLINK_TYPE,
-                        PagerankConfig.DANGLING_NAME),
-                new TextCellArrayWritable(danglingArr),
+                new IntWritable(PagerankConfig.DANGLING_NAME.hashCode()),
+                new CellArrayWritable(danglingArr),
                 PagerankConfig.OUTPUT_OUTLINKS + "/"
         );
 
         multipleOutput.write(
                 PagerankConfig.OUTPUT_INLINKS,
-                new GraphKeyWritable(
-                        PagerankConfig.INLINK_TYPE,
-                        PagerankConfig.DANGLING_NAME),
-                new TextCellArrayWritable(danglingArr),
+                new IntWritable(PagerankConfig.DANGLING_NAME.hashCode()),
+                new CellArrayWritable(danglingArr),
                 PagerankConfig.OUTPUT_INLINKS + "/"
         );
-//
+
         multipleOutput.write(
                 PagerankConfig.OUTPUT_OUTLINKS,
-                new GraphKeyWritable(
-                        PagerankConfig.OUTLINK_TYPE,
-                        PagerankConfig.EMPTY_INLINKS),
-                new TextCellArrayWritable(emptyInlinkArr),
+                new IntWritable(PagerankConfig.EMPTY_INLINKS.hashCode()),
+                new CellArrayWritable(emptyInlinkArr),
                 PagerankConfig.OUTPUT_OUTLINKS + "/"
         );
-//
+
         multipleOutput.write(
                 PagerankConfig.OUTPUT_INLINKS,
-                new GraphKeyWritable(
-                        PagerankConfig.INLINK_TYPE,
-                        PagerankConfig.EMPTY_INLINKS),
-                new TextCellArrayWritable(emptyInlinkArr),
+                new IntWritable(PagerankConfig.EMPTY_INLINKS.hashCode()),
+                new CellArrayWritable(emptyInlinkArr),
                 PagerankConfig.OUTPUT_INLINKS + "/"
         );
 
         System.out.println("counter1: " + counter1);
 
-        if (reducerID == 0) {
-            multipleOutput.write(
-                    PagerankConfig.OUTPUT_LINKMAP,
-                    new Text(PagerankConfig.DANGLING_NAME),
-                    new IntWritable(PagerankConfig.DANGLING_NAME_INT),
-                    PagerankConfig.OUTPUT_LINKMAP + "/"
-            );
-
-            multipleOutput.write(
-                    PagerankConfig.OUTPUT_LINKMAP,
-                    new Text(PagerankConfig.EMPTY_INLINKS),
-                    new IntWritable(PagerankConfig.EMPTY_INLINKS_INT),
-                    PagerankConfig.OUTPUT_LINKMAP + "/"
-            );
-        }
-
         multipleOutput.close();
-//        PriorityQueue
     }
-
-
 }
diff --git a/MatrixPagerank/src/main/java/Preprocess/LinkNamePartitioner.java b/MatrixPagerank/src/main/java/Preprocess/LinkNamePartitioner.java
deleted file mode 100644
index 3434cce..0000000
--- a/MatrixPagerank/src/main/java/Preprocess/LinkNamePartitioner.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package Preprocess;
-
-import Config.PagerankConfig;
-import org.apache.hadoop.mapreduce.Partitioner;
-
-/**
- * Created by kingkz on 11/15/16.
- */
-public class LinkNamePartitioner
-        extends Partitioner<GraphKeyWritable, GraphKeyArrayWritable> {
-
-
-    @Override
-    public int getPartition(GraphKeyWritable graphKeyWritable,
-                            GraphKeyArrayWritable graphKeyArrayWritable,
-                            int numPartitions) {
-        if (numPartitions < 2) {
-            return 0;
-        }
-        if (graphKeyWritable.getType() == PagerankConfig.LINK_MAP_TYPE) {
-            return 0;
-        } else {
-        return 1 +
-                Math.abs(
-                graphKeyWritable.getName().hashCode() %
-                        (numPartitions - 1)
-                );
-        }
-    }
-}
diff --git a/MatrixPagerank/src/main/java/Preprocess/MatricesGenerator.java b/MatrixPagerank/src/main/java/Preprocess/MatricesGenerator.java
index c6d8674..ebb6e4e 100644
--- a/MatrixPagerank/src/main/java/Preprocess/MatricesGenerator.java
+++ b/MatrixPagerank/src/main/java/Preprocess/MatricesGenerator.java
@@ -7,15 +7,12 @@ import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.io.*;
 import org.apache.hadoop.mapreduce.Job;
 import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
-import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;
 import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
 import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
 import org.apache.hadoop.mapreduce.lib.output.MultipleOutputs;
 import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
 import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
 
-import java.net.URI;
-
 /**
  * Created by kingkz on 11/11/16.
  */
@@ -26,9 +23,65 @@ public class MatricesGenerator {
     public static void preprocess(Configuration conf, Path input) throws
             Exception {
         getLinkMap(conf, input);
-        writeMappedGraph(conf);
+
+//        getGraph(conf);
     }
 
+//    private static void getGraph(Configuration conf) throws Exception {
+//
+//        Job job = Job.getInstance(conf, "get_link_graph");
+//
+//        job.setJarByClass(MatricesGenerator.class);
+//        job.setMapperClass(GraphCreaterMapper.class);
+//        job.setReducerClass(GraphCreaterReducer.class);
+//
+//        job.setMapOutputKeyClass(GraphKeyWritable.class);
+//        job.setMapOutputValueClass(CellArrayWritable.class);
+//
+//        job.setOutputKeyClass(LongWritable.class);
+//        job.setOutputValueClass(CellArrayWritable.class);
+//
+//        Path input = Utils.getPathInTemp(PagerankConfig
+//                .RAW_LINK_GRAPH);
+//        FileInputFormat.addInputPath(job, input);
+//
+//        job.setInputFormatClass(SequenceFileInputFormat.class);
+//
+//        Path output = Utils.getPathInTemp(PagerankConfig.OUTPUT_LINK_GRAPH);
+//        Utils.CheckOutputPath(conf, output);
+//
+//        FileOutputFormat.setOutputPath(job, output);
+//
+//        MultipleOutputs.addNamedOutput(
+//                job,
+//                PagerankConfig.OUTPUT_OUTLINKS_MAPPED,
+//                SequenceFileOutputFormat.class,
+//                LongWritable.class,
+//                CellArrayWritable.class
+//        );
+//
+//        MultipleOutputs.addNamedOutput(
+//                job,
+//                PagerankConfig.OUTPUT_INLINKS_MAPPED,
+//                SequenceFileOutputFormat.class,
+//                LongWritable.class,
+//                CellArrayWritable.class
+//        );
+//
+//        MultipleOutputs.addNamedOutput(
+//                job,
+//                PagerankConfig.OUTPUT_DANGLING,
+//                SequenceFileOutputFormat.class,
+//                LongWritable.class,
+//                NullWritable.class
+//        );
+//
+//        boolean ok = job.waitForCompletion(true);
+//        if (!ok) {
+//            throw  new Exception("Job Fail at getting link's map");
+//        }
+//
+//    }
 
     private static void getLinkMap(Configuration conf, Path path) throws
             Exception {
@@ -36,9 +89,7 @@ public class MatricesGenerator {
 
         job.setJarByClass(MatricesGenerator.class);
         job.setMapperClass(LinkNameMapMapper.class);
-        job.setPartitionerClass(LinkNamePartitioner.class);
         job.setReducerClass(LinkNameMapReducer.class);
-//        job.setNumReduceTasks(PagerankConfig.NUMBER_OF_REDUCERS_INT);
 
         job.setMapOutputKeyClass(GraphKeyWritable.class);
         job.setMapOutputValueClass(GraphKeyArrayWritable.class);
@@ -48,26 +99,24 @@ public class MatricesGenerator {
         FileInputFormat.addInputPath(job, path);
         FileInputFormat.setInputDirRecursive(job, true);
 
-        Path linksOutput = Utils.getPathInTemp(conf, "");
+        Path linksOutput = new Path(PagerankConfig.TEMP_ROOT);
 
         Utils.CheckOutputPath(conf, linksOutput);
 
-        System.out.println(linksOutput.toString());
-
         MultipleOutputs.addNamedOutput(
                         job,
                         PagerankConfig.OUTPUT_OUTLINKS,
                 SequenceFileOutputFormat.class,
-                GraphKeyWritable.class,
-                TextCellArrayWritable.class
+                IntWritable.class,
+                CellArrayWritable.class
                 );
 
         MultipleOutputs.addNamedOutput(
                 job,
                 PagerankConfig.OUTPUT_INLINKS,
                 SequenceFileOutputFormat.class,
-                GraphKeyWritable.class,
-                TextCellArrayWritable.class
+                IntWritable.class,
+                CellArrayWritable.class
         );
 
         MultipleOutputs.addNamedOutput(
@@ -104,81 +153,12 @@ public class MatricesGenerator {
                         .findCounter(PagerankConfig.PagerankCounter.LINK_COUNTER)
                         .getValue()),
                 conf);
-
-    }
-
-    public static void writeMappedGraph(Configuration conf) throws
-            Exception {
-
-        Job job = Job.getInstance(conf);
-
-        job.setMapOutputKeyClass(IntWritable.class);
-        job.setMapOutputValueClass(CellArrayWritable.class);
-
-        URI links = new URI(conf.get(PagerankConfig.OUTPUT_WORKING_DIRECTORY) +
-                "/" +
-                Utils.getPathInTemp(conf,
-                        PagerankConfig
-                                .OUTPUT_LINKMAP + "/-r-00000")
-                        .toString());
-
-//        if (conf.get(PagerankConfig.URI_ROOT) != null) {
-//            System.out.println("adding cache: " + links.toString());
-//            job.addCacheFile(links);
-//        }
-
-        job.setJarByClass(MatricesGenerator.class);
-//        job.setReducerClass(NameToNumberReducer.class);
-        job.setNumReduceTasks(0);
-
-        MultipleInputs.addInputPath(
-                job,
-                Utils.getPathInTemp(conf, PagerankConfig.OUTPUT_OUTLINKS),
-                SequenceFileInputFormat.class,
-                NameToNumberMapper.class
-        );
-
-        MultipleInputs.addInputPath(
-                job,
-                Utils.getPathInTemp(conf, PagerankConfig.OUTPUT_INLINKS),
-                SequenceFileInputFormat.class,
-                NameToNumberMapper.class
-        );
-
-        Utils.CheckOutputPath(conf, Utils.getPathInTemp(conf, PagerankConfig
-                .OUTPUT_INLINKS_MAPPED));
-        Utils.CheckOutputPath(conf, Utils.getPathInTemp(conf, PagerankConfig
-                .OUTPUT_OUTLINKS_MAPPED));
-
-        MultipleOutputs.addNamedOutput(
-                job,
-                PagerankConfig.OUTPUT_INLINKS_MAPPED,
-                SequenceFileOutputFormat.class,
-                IntWritable.class,
-                CellArrayWritable.class
-        );
-
-        MultipleOutputs.addNamedOutput(
-                job,
-                PagerankConfig.OUTPUT_OUTLINKS_MAPPED,
-                SequenceFileOutputFormat.class,
-                IntWritable.class,
-                CellArrayWritable.class
-        );
-
-        Path output = new Path(Utils.getPathInTemp(conf, PagerankConfig
-                .MAPPED_OUTPUT).toString());
-        Utils.CheckOutputPath(conf, output);
-        job.setOutputFormatClass(SequenceFileOutputFormat.class);
-        FileOutputFormat.setOutputPath(job, output);
-
-        if (!job.waitForCompletion(true)) {
-            throw new Exception("Failed at mapping: ");
-        }
     }
 
     public static void main(String[] args) throws Exception {
         Configuration conf = new Configuration();
+
         preprocess(conf, new Path("data0"));
+
     }
 }
diff --git a/MatrixPagerank/src/main/java/Preprocess/NameToNumberReducer.java b/MatrixPagerank/src/main/java/Preprocess/NameToNumberReducer.java
deleted file mode 100644
index 4e26536..0000000
--- a/MatrixPagerank/src/main/java/Preprocess/NameToNumberReducer.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package Preprocess;
-
-import Config.PagerankConfig;
-import org.apache.hadoop.io.IntWritable;
-import org.apache.hadoop.mapreduce.Reducer;
-import org.apache.hadoop.mapreduce.lib.output.MultipleOutputs;
-
-import java.io.IOException;
-import java.util.Iterator;
-
-/**
- * Created by kingkz on 11/15/16.
- */
-
-
-public class NameToNumberReducer extends Reducer<GraphKeyWritable,
-        CellArrayWritable, IntWritable, CellArrayWritable> {
-
-    private MultipleOutputs mos;
-
-    @Override
-    protected void setup(Context context) throws IOException, InterruptedException {
-        mos = new MultipleOutputs<>(context);
-    }
-
-    @Override
-    protected void reduce(GraphKeyWritable key, Iterable<CellArrayWritable> values, Context context) throws IOException, InterruptedException {
-        Iterator<CellArrayWritable> iter = values.iterator();
-        if (iter.hasNext()) {
-            CellArrayWritable cellArrayWritable = iter.next();
-            if (key.getType() == PagerankConfig.OUTLINK_TYPE) {
-                mos.write(
-                        PagerankConfig.OUTPUT_OUTLINKS_MAPPED,
-                        new IntWritable(key.getCount()),
-                        cellArrayWritable,
-                        PagerankConfig.OUTPUT_OUTLINKS + "/"
-                );
-            } else {
-                mos.write(
-                        PagerankConfig.OUTPUT_INLINKS_MAPPED,
-                        new IntWritable(key.getCount()),
-                        cellArrayWritable,
-                        PagerankConfig.OUTPUT_INLINKS_MAPPED + "/"
-                );
-            }
-        }
-    }
-
-    @Override
-    protected void cleanup(Context context) throws IOException, InterruptedException {
-        mos.close();
-    }
-}
diff --git a/MatrixPagerank/src/main/java/Preprocess/TextCellArrayWritable.java b/MatrixPagerank/src/main/java/Preprocess/TextCellArrayWritable.java
deleted file mode 100644
index f413ca2..0000000
--- a/MatrixPagerank/src/main/java/Preprocess/TextCellArrayWritable.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package Preprocess;
-
-import com.google.common.collect.Iterables;
-import org.apache.hadoop.io.ArrayWritable;
-import org.apache.hadoop.io.Writable;
-
-/**
- * Created by kingkz on 11/15/16.
- */
-public class TextCellArrayWritable extends ArrayWritable {
-    public TextCellArrayWritable() {
-        super(TextCellWritable.class);
-        set(new TextCellWritable[0]);
-    }
-
-
-    public TextCellArrayWritable(Iterable<TextCellWritable> iterable) {
-        super(TextCellWritable.class);
-        set(Iterables.toArray(iterable, TextCellWritable.class));
-    }
-
-    public TextCellArrayWritable(TextCellWritable[] iterable) {
-        super(TextCellWritable.class);
-        set(iterable);
-    }
-}
diff --git a/MatrixPagerank/src/main/java/Preprocess/TextCellWritable.java b/MatrixPagerank/src/main/java/Preprocess/TextCellWritable.java
deleted file mode 100644
index d1d1b4d..0000000
--- a/MatrixPagerank/src/main/java/Preprocess/TextCellWritable.java
+++ /dev/null
@@ -1,69 +0,0 @@
-package Preprocess;
-
-import org.apache.hadoop.io.Writable;
-
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.IOException;
-
-/**
- * Created by kingkz on 11/15/16.
- */
-
-public class TextCellWritable implements Writable {
-
-
-    private String rowcol;
-    private double value;
-
-    public String getRowcol() {
-        return rowcol;
-    }
-
-    public void setRowcol(String rowcol) {
-        this.rowcol = rowcol;
-    }
-
-    public double getValue() {
-        return value;
-    }
-
-    public void setValue(double value) {
-        this.value = value;
-    }
-
-    public TextCellWritable (String rowcol, double value) {
-        this.rowcol = rowcol;
-        this.value = value;
-    }
-
-    public TextCellWritable() {
-        this.value = 0;
-        this.rowcol = "";
-    }
-
-    public TextCellWritable (TextCellWritable c) {
-        this.value = c.getValue();
-        this.rowcol = c.getRowcol();
-    }
-
-    @Override
-    public void write(DataOutput out) throws IOException {
-        out.writeUTF(rowcol);
-        out.writeDouble(value);
-    }
-
-    @Override
-    public void readFields(DataInput in) throws IOException {
-        rowcol = in.readUTF();
-        value = in.readDouble();
-    }
-
-    @Override
-    public int hashCode() {
-        int result = 0;
-        result = result * 31 + rowcol.hashCode();
-        result = result * 31 + Double.hashCode(value);
-        return result;
-    }
-}
diff --git a/MatrixPagerank/src/main/java/TOPK/DescendingKeyComparator.java b/MatrixPagerank/src/main/java/TOPK/DescendingKeyComparator.java
new file mode 100644
index 0000000..94a5bce
--- /dev/null
+++ b/MatrixPagerank/src/main/java/TOPK/DescendingKeyComparator.java
@@ -0,0 +1,27 @@
+package TOPK;
+
+import org.apache.hadoop.io.DoubleWritable;
+import org.apache.hadoop.io.WritableComparable;
+import org.apache.hadoop.io.WritableComparator;
+
+/**
+ * Created by kingkz on 11/13/16.
+ */
+
+public class DescendingKeyComparator extends WritableComparator {
+    protected DescendingKeyComparator() {
+        super(DoubleWritable.class, true);
+    }
+
+
+    /*
+        Simple, just reverse the original comparing result
+     */
+    @SuppressWarnings("rawtypes")
+    @Override
+    public int compare(WritableComparable w1, WritableComparable w2) {
+        DoubleWritable key1 = (DoubleWritable) w1;
+        DoubleWritable key2 = (DoubleWritable) w2;
+        return -1 * key1.compareTo(key2);
+    }
+}
\ No newline at end of file
diff --git a/MatrixPagerank/src/main/java/TOPK/GetTopLinks.java b/MatrixPagerank/src/main/java/TOPK/GetTopLinks.java
index 67fcd66..ebadcf8 100644
--- a/MatrixPagerank/src/main/java/TOPK/GetTopLinks.java
+++ b/MatrixPagerank/src/main/java/TOPK/GetTopLinks.java
@@ -3,7 +3,6 @@ package TOPK;
 import Config.PagerankConfig;
 import Util.Utils;
 import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.io.DoubleWritable;
 import org.apache.hadoop.io.IntWritable;
@@ -33,8 +32,11 @@ public class GetTopLinks {
 
         Path pagerankInput;
 
-        pagerankInput = Utils.getPathInTemp(conf, PagerankConfig
-                .OUTPUT_PAGERANK + "11");
+        if (isByRow) {
+            pagerankInput = Utils.getPathInTemp(PagerankConfig.OUTPUT_PAGERANK + "11");
+        } else {
+            pagerankInput = Utils.getPathInTemp(PagerankConfig.OUTPUT_PAGERANK + "21");
+        }
 
         MultipleInputs.addInputPath(
                 job,
@@ -43,32 +45,21 @@ public class GetTopLinks {
                 TopLinksMapper.class
         );
 
-//        MultipleInputs.addInputPath(
-//                job,
-//                Utils.getPathInTemp(PagerankConfig.OUTPUT_LINKMAP),
-//                SequenceFileInputFormat.class,
-//                NameHashMapper.class
-//        );
+        MultipleInputs.addInputPath(
+                job,
+                Utils.getPathInTemp(PagerankConfig.OUTPUT_LINKMAP),
+                SequenceFileInputFormat.class,
+                NameHashMapper.class
+        );
 
         job.setReducerClass(TopLinksReducer.class);
-        job.setNumReduceTasks(1);
 
-        job.setMapOutputKeyClass(DoubleWritable.class);
-        job.setMapOutputValueClass(IntWritable.class);
-
-        job.setOutputKeyClass(DoubleWritable.class);
-        job.setOutputValueClass(Text.class);
+        job.setOutputKeyClass(IntWritable.class);
+        job.setOutputValueClass(PagerankCellWritable.class);
         job.setOutputFormatClass(TextOutputFormat.class);
 
-        Path output;
-
-        if (isByRow) {
-            output = Utils.getFinalOutputPathByKey(conf,
-                    PagerankConfig.TOP_100_PATH_BY_ROW);
-        } else {
-            output = Utils.getFinalOutputPathByKey(conf,
-                    PagerankConfig.TOP_100_PATH_BY_COL);
-        }
+        Path output = new Path(PagerankConfig.FINAL_OUTPUT);
+        Utils.CheckOutputPath(conf, output);
 
         FileOutputFormat.setOutputPath(job, output);
 
@@ -79,15 +70,9 @@ public class GetTopLinks {
         }
     }
 
+
     public static void main(String[] args) throws Exception {
         Configuration conf = new Configuration();
-//        showTop(conf, true);
-
-        System.out.println(" temp/pagerankvalue1/-r-00000".contains
-                (PagerankConfig.OUTPUT_PAGERANK+1));
-
-        System.out.println(conf.get("fs.defaultFS"));
-
-
+        showTop(conf, true);
     }
 }
diff --git a/MatrixPagerank/src/main/java/TOPK/TopLinksMapper.java b/MatrixPagerank/src/main/java/TOPK/TopLinksMapper.java
index bddfbc7..948ba6f 100644
--- a/MatrixPagerank/src/main/java/TOPK/TopLinksMapper.java
+++ b/MatrixPagerank/src/main/java/TOPK/TopLinksMapper.java
@@ -14,7 +14,7 @@ import java.util.TreeMap;
  * Created by kingkz on 11/13/16.
  */
 public class TopLinksMapper extends Mapper<IntWritable, DoubleWritable,
-        DoubleWritable, IntWritable> {
+        IntWritable, PagerankCellWritable> {
 
     private TreeMap<Double, Integer> topMap;
 
@@ -24,24 +24,12 @@ public class TopLinksMapper extends Mapper<IntWritable, DoubleWritable,
     @Override
     protected void setup(Context context) throws IOException, InterruptedException {
         topMap = new TreeMap<>();
+        danglingSum = Double.parseDouble(
+                Utils.readData(PagerankConfig.DANGLING_FILENAME,
+                        context.getConfiguration()));
 
-        if (context.getConfiguration().get(PagerankConfig.DANGLING_NAME)==null) {
-            danglingSum = Double.parseDouble(
-                    Utils.readData(PagerankConfig.DANGLING_FILENAME,
-                            context.getConfiguration()));
-        } else {
-            danglingSum = context.getConfiguration().getDouble(PagerankConfig
-                    .DANGLING_NAME, 0.0);
-        }
-
-        if (context.getConfiguration().get(PagerankConfig.DANGLING_NAME) ==
-                null) {
-            numberOfLinks = Long.parseLong(Utils.readData(PagerankConfig.NUMBER_OF_LINKS,
-                    context.getConfiguration()));
-        } else {
-            numberOfLinks = context.getConfiguration().getLong(PagerankConfig
-                    .NUMBER_OF_LINKS, 0);
-        }
+        numberOfLinks = Long.parseLong(Utils.readData(PagerankConfig.NUMBER_OF_LINKS,
+                context.getConfiguration()));
     }
 
     @Override
@@ -58,8 +46,8 @@ public class TopLinksMapper extends Mapper<IntWritable, DoubleWritable,
     protected void cleanup(Context context) throws IOException, InterruptedException {
         for (Double weight : topMap.descendingKeySet()) {
             context.write(
-                    new DoubleWritable(weight),
-                    new IntWritable(topMap.get(weight)));
+                    new IntWritable(topMap.get(weight)),
+                    new PagerankCellWritable("", weight));
         }
     }
 }
diff --git a/MatrixPagerank/src/main/java/TOPK/TopLinksReducer.java b/MatrixPagerank/src/main/java/TOPK/TopLinksReducer.java
index 2a9b0b6..a99f2b3 100644
--- a/MatrixPagerank/src/main/java/TOPK/TopLinksReducer.java
+++ b/MatrixPagerank/src/main/java/TOPK/TopLinksReducer.java
@@ -1,85 +1,29 @@
 package TOPK;
 
-import Config.PagerankConfig;
-import Util.Utils;
-import org.apache.hadoop.fs.FileStatus;
-import org.apache.hadoop.fs.FileSystem;
-import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.io.DoubleWritable;
 import org.apache.hadoop.io.IntWritable;
-import org.apache.hadoop.io.SequenceFile;
 import org.apache.hadoop.io.Text;
-import org.apache.hadoop.mapreduce.Mapper;
 import org.apache.hadoop.mapreduce.Reducer;
 
 import java.io.IOException;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.List;
+import java.util.TreeMap;
 
 /**
  * Created by kingkz on 11/13/16.
  */
 
 public class TopLinksReducer
-        extends Reducer<DoubleWritable, IntWritable, DoubleWritable,
+        extends Reducer<IntWritable, PagerankCellWritable, DoubleWritable,
         Text> {
 
     private static TreeMap<Double, String> topMap;
-    private Map<Integer, String> linkMap;
 
     @Override
     protected void setup(Context context) throws IOException, InterruptedException {
         topMap = new TreeMap<>();
-        try {
-            linkMap = readLinkMap(context);
-        } catch (URISyntaxException e) {
-            e.printStackTrace();
-        }
-    }
-
-    private Map<Integer, String> readLinkMap(Context context) throws
-            IOException, URISyntaxException {
-
-        String basedir = context.getConfiguration().get(PagerankConfig
-                .OUTPUT_WORKING_DIRECTORY) +
-                "/" +
-                Utils.getPathInTemp(context.getConfiguration(),
-                        PagerankConfig
-                                .OUTPUT_LINKMAP)
-                        .toString();
-        System.out.println("found cache");
-        FileSystem fs = FileSystem.get(new URI(context.getConfiguration().get
-                (PagerankConfig.OUTPUT_WORKING_DIRECTORY)), context
-                .getConfiguration());
-
-        Map<Integer, String> nameMap = new HashMap<>();
-        for (FileStatus file : fs.listStatus(new Path(basedir))) {
-            readNameMap(file.getPath(), nameMap, context);
-        }
-
-        nameMap.put(PagerankConfig
-                .DANGLING_NAME_INT, PagerankConfig.DANGLING_NAME);
-        nameMap.put(PagerankConfig.EMPTY_INLINKS_INT, PagerankConfig.EMPTY_INLINKS);
-        return nameMap;
-    }
-
-    private void readNameMap(Path path, Map<Integer, String> nameMap, Context
-            context) throws IOException {
-        SequenceFile.Reader reader = new SequenceFile.Reader(context
-                .getConfiguration(), SequenceFile.Reader.file
-                (path));
-
-        Text key = new Text();
-        IntWritable value = new IntWritable();
-        while (true) {
-            if (!reader.next(key, value)) {
-                reader.close();
-                break;
-            }
-            nameMap.put(value.get(), key.toString());
-        }
-        System.out.println("map size" + nameMap.size());
     }
 
     /**
@@ -91,30 +35,28 @@ public class TopLinksReducer
      * @throws InterruptedException
      */
     @Override
-    protected void reduce(DoubleWritable key, Iterable<IntWritable> values,
+    protected void reduce(IntWritable key, Iterable<PagerankCellWritable> values,
                           Context context)
             throws IOException, InterruptedException {
-//        double pagerank = 0;
-//        String linkname = null;
-//        int counter = 0;
-//        for (PagerankCellWritable cell : values) {
-//            if (cell.getName().length() > 0) {
-//                linkname = cell.getName();
-//                counter += 1;
-//            } else if (cell.getPagerank() > 0) {
-//                pagerank = cell.getPagerank();
-//                counter += 1;
-//            }
-//
-//        }
-//        if (counter == 2) {
-        for (IntWritable link : values) {
-            topMap.put(key.get(), linkMap.get(link.get()));
+        double pagerank = 0;
+        String linkname = null;
+        int counter = 0;
+        for (PagerankCellWritable cell : values) {
+            if (cell.getName().length() > 0) {
+                linkname = cell.getName();
+                counter += 1;
+            } else if (cell.getPagerank() > 0) {
+                pagerank = cell.getPagerank();
+                counter += 1;
+            }
+
+        }
+        if (counter == 2) {
+            topMap.put(pagerank, linkname);
             if (topMap.size() > 100) {
                 topMap.remove(topMap.firstKey());
             }
         }
-//        }
     }
 
     @Override
diff --git a/MatrixPagerank/src/main/java/Util/Utils.java b/MatrixPagerank/src/main/java/Util/Utils.java
index 5a81a26..de9a81a 100644
--- a/MatrixPagerank/src/main/java/Util/Utils.java
+++ b/MatrixPagerank/src/main/java/Util/Utils.java
@@ -4,7 +4,6 @@ package Util;
  * Created by kingkz on 11/11/16.
  */
 
-import Config.PagerankConfig;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FSDataInputStream;
 import org.apache.hadoop.fs.FSDataOutputStream;
@@ -64,7 +63,7 @@ public class Utils {
 
 
     public static void writeData(String key, String value, Configuration conf) throws IOException {
-        Path path = getPathInTemp(conf, key);
+        Path path = getPathInTemp(key);
         checkTempFilePathbyKey(conf, key);
         FSDataOutputStream fin = FileSystem.get(conf).create(path);
         fin.writeUTF(key+"="+value);
@@ -72,7 +71,7 @@ public class Utils {
     }
 
     public static String readData(String key, Configuration conf) throws IOException {
-        Path path = getPathInTemp(conf, key);
+        Path path = getPathInTemp(key);
 
         FileSystem fs = FileSystem.get(conf);
 
@@ -90,37 +89,30 @@ public class Utils {
 
     public static void prepareOutputPath(Configuration conf) throws IOException {
         ensurePath(conf, new Path(Config.PagerankConfig.TEMP_ROOT), true);
-        ensurePath(conf, getPathInTemp(conf, Config.PagerankConfig
+        ensurePath(conf, getPathInTemp(Config.PagerankConfig
                 .OUTPUT_ROOT_PATH), true);
     }
 
     private static void checkTempFilePathbyKey(Configuration conf, String key) throws IOException {
         FileSystem hdfs = FileSystem.get(conf);
-        Path tempPath = getPathInTemp(conf, key);
+        Path tempPath = getPathInTemp(key);
         if (!hdfs.exists(tempPath)) {
             hdfs.mkdirs(tempPath);
         }
 
-        Path path = getPathInTemp(conf, key);
+        Path path = getPathInTemp(key);
         if (hdfs.exists(path)) {
             hdfs.delete(path, true);
         }
     }
 
-    public static Path getPathInTemp(Configuration conf, String key) throws IOException {
-//        if (conf.get(PagerankConfig.URI_ROOT) == null) {
-//            Path p = new Path("test");
-//            FileSystem fs = p.getFileSystem(conf);
-//            conf.set(PagerankConfig.OUTPUT_WORKING_DIRECTORY, String.valueOf(fs.getWorkingDirectory
-//                    ()));
-//        }
-        return new Path(PagerankConfig.TEMP_ROOT + "/" + key);
+    public static Path getPathInTemp(String key) {
+        return new Path(Config.PagerankConfig.TEMP_ROOT+ "/" + key);
     }
 
-    public static void CheckOutputPath(Configuration conf, Path path) throws IOException, URISyntaxException {
-        FileSystem fs = FileSystem.get(new URI(PagerankConfig
-                        .TEMP_ROOT),
-                conf);
+
+    public static void CheckOutputPath(Configuration conf, Path path) throws IOException {
+        FileSystem fs = FileSystem.get(conf);
         fs.delete(path, true);
     }
 
@@ -172,18 +164,4 @@ public class Utils {
         check(fs, path, newPath);
     }
 
-    public static Path getOutputPathByIterNum(Configuration conf, int i) throws IOException {
-        return Utils.getPathInTemp(conf, PagerankConfig.OUTPUT_ROOT_PATH +
-                "/output_" + i);
-    }
-
-    public static Path getFinalOutputPathByKey(Configuration conf, String key)
-            throws IOException {
-        Path path = new Path(conf.get(PagerankConfig.FINAL_OUTPUT));
-        Utils.ensureFinalPath(conf, path, false);
-        Path newPath = new Path(conf.get(PagerankConfig.FINAL_OUTPUT) + "/" + key);
-        Utils.CheckFinalOutputPath(conf, newPath);
-        return newPath;
-    }
-
 }
diff --git a/homework3_pagerank/pagerank/src/main/java/Pagerank/Utils.java b/homework3_pagerank/pagerank/src/main/java/Pagerank/Utils.java
index 94fef68..edd0682 100644
--- a/homework3_pagerank/pagerank/src/main/java/Pagerank/Utils.java
+++ b/homework3_pagerank/pagerank/src/main/java/Pagerank/Utils.java
@@ -106,6 +106,7 @@ public class Utils {
         }
     }
 
+
     public static void CheckFinalOutputPath(Configuration conf, Path path) throws IOException {
         FileSystem fs = getFileSystem(conf);
         fs.delete(path, true);
